# Generated by Django 4.1.2 on 2023-03-31 16:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import grifmood.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=255, unique=True, verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=False, verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff')),
                ('is_verified', models.BooleanField(default=False, verbose_name='verified')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'unique_together': {('username', 'email')},
            },
            managers=[
                ('objects', grifmood.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=500, verbose_name='first_name')),
                ('second_name', models.CharField(max_length=500, verbose_name='second_name')),
                ('sex', models.CharField(max_length=500, verbose_name='sex')),
                ('age', models.IntegerField(verbose_name='age')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'profile',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id_test', models.AutoField(primary_key=True, serialize=False)),
                ('test_name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('test_completion_time', models.IntegerField()),
            ],
            options={
                'db_table': 'test',
            },
        ),
        migrations.CreateModel(
            name='ResultTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255)),
                ('test_completion_time', models.IntegerField()),
                ('score', models.IntegerField()),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grifmood.profile')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grifmood.test')),
            ],
            options={
                'db_table': 'resulttest',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('number', models.IntegerField()),
                ('question', models.CharField(max_length=255)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grifmood.test')),
            ],
            options={
                'db_table': 'question',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('assessment', models.IntegerField()),
                ('description', models.CharField(max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('work', models.IntegerField()),
                ('reading', models.IntegerField()),
                ('workout', models.IntegerField()),
                ('gaming', models.IntegerField()),
                ('family', models.IntegerField()),
                ('friend', models.IntegerField()),
                ('study', models.IntegerField()),
                ('music', models.IntegerField()),
                ('movie', models.IntegerField()),
                ('shopping', models.IntegerField()),
                ('travel', models.IntegerField()),
                ('cleaning', models.IntegerField()),
                ('sleep', models.IntegerField()),
                ('party', models.IntegerField()),
                ('bar', models.IntegerField()),
                ('leisure', models.IntegerField()),
                ('rendezvous', models.IntegerField()),
                ('TV', models.IntegerField()),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grifmood.profile')),
            ],
            options={
                'db_table': 'condition',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('answer', models.CharField(max_length=255)),
                ('points', models.IntegerField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grifmood.question')),
            ],
            options={
                'db_table': 'answer',
            },
        ),
    ]
